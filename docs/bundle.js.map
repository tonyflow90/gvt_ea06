{"version":3,"file":"bundle.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat4.js","../src/shader/VertexShader.js","../src/shapes/Plane.js","../src/shapes/Sphere.js","../src/shapes/Torus.js","../src/App.js","../src/shader/FragmentShader.js","../src/main.js"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","export let VertexShader = `\r\n    attribute vec3 aPosition;\r\n    attribute vec3 aNormal;\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n\r\n    varying vec4 vColor;\r\n\r\n    void main(){\r\n    gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);\r\n\r\n    vColor = vec4(aNormal.x, aNormal.y, aNormal.z, 1.0);\r\n    vColor = (vColor + 1.0) / 2.0;\r\n    }\r\n`","// BEGIN exercise plane\nexport let Plane = ( function() {\n\n\tfunction createVertexData() {\n\t\tlet n = 100;\n\t\tlet m = 100;\n\n\t\t// Positions.\n\t\tthis.vertices = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet vertices = this.vertices;\n\t\t// Normals.\n\t\tthis.normals = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet normals = this.normals;\n\t\t// Index data.\n\t\tthis.indicesLines = new Uint16Array(2 * 2 * n * m);\n\t\tlet indicesLines = this.indicesLines;\n\t\tthis.indicesTris = new Uint16Array(3 * 2 * n * m);\n\t\tlet indicesTris = this.indicesTris;\n\n\t\tlet du = 20 / n;\n\t\tlet dv = 20 / m;\n\t\t// Counter for entries in index array.\n\t\tlet iLines = 0;\n\t\tlet iTris = 0;\n\n\t\t// Loop u.\n\t\tfor(let i = 0, u = -10; i <= n; i++, u += du) {\n\t\t\t// Loop v.\n\t\t\tfor(let j = 0, v = -10; j <= m; j++, v += dv) {\n\n\t\t\t\tlet iVertex = i * (m + 1) + j;\n\n\t\t\t\tlet x = u;\n\t\t\t\tlet y = 0;\n\t\t\t\tlet z = v;\n\n\t\t\t\t// Set vertex positions.\n\t\t\t\tvertices[iVertex * 3] = x;\n\t\t\t\tvertices[iVertex * 3 + 1] = y;\n\t\t\t\tvertices[iVertex * 3 + 2] = z;\n\n\t\t\t\t// Calc and set normals.\n\t\t\t\tnormals[iVertex * 3] = 0;\n\t\t\t\tnormals[iVertex * 3 + 1] = 1;\n\t\t\t\tnormals[iVertex * 3 + 2] = 0;\n\n\t\t\t\t// Set index.\n\t\t\t\t// Line on beam.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - 1;\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\t\t\t\t// Line on ring.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - (m + 1);\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\n\t\t\t\t// Set index.\n\t\t\t\t// Two Triangles.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesTris[iTris++] = iVertex;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t\t//\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1) - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\n\t}\n\n\treturn {\n\t\tcreateVertexData : createVertexData\n\t}\n\n}());\n//END exercise plane","export let Sphere = ( function() {\n\n\tfunction createVertexData() {\n\t\tlet n = 5;\n\t\tlet m = 5;\n\n\t\t// Positions.\n\t\tthis.vertices = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet vertices = this.vertices;\n\t\t// Normals.\n\t\tthis.normals = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet normals = this.normals;\n\t\t// Index data.\n\t\tthis.indicesLines = new Uint16Array(2 * 2 * n * m);\n\t\tlet indicesLines = this.indicesLines;\n\t\tthis.indicesTris = new Uint16Array(3 * 2 * n * m);\n\t\tlet indicesTris = this.indicesTris;\n\n\t\tlet du = 2 * Math.PI / n;\n\t\tlet dv = Math.PI / m;\n\t\tlet r = 1;\n\t\t// Counter for entries in index array.\n\t\tlet iLines = 0;\n\t\tlet iTris = 0;\n\n\t\t// Loop angle u.\n\t\tfor(let i = 0, u = 0; i <= n; i++, u += du) {\n\t\t\t// Loop angle v.\n\t\t\tfor(let j = 0, v = 0; j <= m; j++, v += dv) {\n\n\t\t\t\tlet iVertex = i * (m + 1) + j;\n\n\t\t\t\tlet x = r * Math.sin(v) * Math.cos(u);\n\t\t\t\tlet y = r * Math.sin(v) * Math.sin(u);\n\t\t\t\tlet z = r * Math.cos(v);\n\n\t\t\t\t// Set vertex positions.\n\t\t\t\tvertices[iVertex * 3] = x;\n\t\t\t\tvertices[iVertex * 3 + 1] = y;\n\t\t\t\tvertices[iVertex * 3 + 2] = z;\n\n\t\t\t\t// Calc and set normals.\n\t\t\t\tlet vertexLength = Math.sqrt(x * x + y * y + z * z);\n\t\t\t\tnormals[iVertex * 3] = x / vertexLength;\n\t\t\t\tnormals[iVertex * 3 + 1] = y / vertexLength;\n\t\t\t\tnormals[iVertex * 3 + 2] = z / vertexLength;\n\n\t\t\t\t// Set index.\n\t\t\t\t// Line on beam.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - 1;\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\t\t\t\t// Line on ring.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - (m + 1);\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\n\t\t\t\t// Set index.\n\t\t\t\t// Two Triangles.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesTris[iTris++] = iVertex;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t\t//\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1) - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\n\t}\n\n\treturn {\n\t\tcreateVertexData : createVertexData\n\t}\n\n}());","export let Torus = ( function() {\n\n\tfunction createVertexData() {\n\t\tlet n = 16;\n\t\tlet m = 32;\n\n\t\t// Positions.\n\t\tthis.vertices = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet vertices = this.vertices;\n\t\t// Normals.\n\t\tthis.normals = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet normals = this.normals;\n\t\t// Index data.\n\t\tthis.indicesLines = new Uint16Array(2 * 2 * n * m);\n\t\tlet indicesLines = this.indicesLines;\n\t\tthis.indicesTris = new Uint16Array(3 * 2 * n * m);\n\t\tlet indicesTris = this.indicesTris;\n\n\t\tlet du = 2 * Math.PI / n;\n\t\tlet dv = 2 * Math.PI / m;\n\t\tlet r = 0.3;\n\t\tlet R = 0.5;\n\t\t// Counter for entries in index array.\n\t\tlet iLines = 0;\n\t\tlet iTris = 0;\n\n\t\t// Loop angle u.\n\t\tfor(let i = 0, u = 0; i <= n; i++, u += du) {\n\t\t\t// Loop angle v.\n\t\t\tfor(let j = 0, v = 0; j <= m; j++, v += dv) {\n\n\t\t\t\tlet iVertex = i * (m + 1) + j;\n\n\t\t\t\tlet x = (R + r * Math.cos(u) ) * Math.cos(v);\n\t\t\t\tlet y = (R + r * Math.cos(u) ) * Math.sin(v);\n\t\t\t\tlet z = r * Math.sin(u);\n\n\t\t\t\t// Set vertex positions.\n\t\t\t\tvertices[iVertex * 3] = x;\n\t\t\t\tvertices[iVertex * 3 + 1] = y;\n\t\t\t\tvertices[iVertex * 3 + 2] = z;\n\n\t\t\t\t// Calc and set normals.\n\t\t\t\tlet nx = Math.cos(u) * Math.cos(v);\n\t\t\t\tlet ny = Math.cos(u) * Math.sin(v);\n\t\t\t\tlet nz = Math.sin(u);\n\t\t\t\tnormals[iVertex * 3] = nx;\n\t\t\t\tnormals[iVertex * 3 + 1] = ny;\n\t\t\t\tnormals[iVertex * 3 + 2] = nz;\n\n\t\t\t\t// if(i>14){\n\t\t\t\t// continue;\n\t\t\t\t// }\n\n\t\t\t\t// Set index.\n\t\t\t\t// Line on beam.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - 1;\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\t\t\t\t// Line on ring.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - (m + 1);\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\n\t\t\t\t// Set index.\n\t\t\t\t// Two Triangles.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesTris[iTris++] = iVertex;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t\t//\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1) - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\n\t}\n\n\treturn {\n\t\tcreateVertexData : createVertexData\n\t}\n\n}());","\r\nimport * as mat4 from 'gl-matrix/esm/mat4.js';\r\n\r\nimport { VertexShader } from './shader/VertexShader.js';\r\nimport { FragmentShader } from './shader/FragmentShader.js';\r\n\r\nimport { Plane } from './shapes/Plane.js';\r\nimport { Sphere } from './shapes/Sphere.js';\r\nimport { Torus } from './shapes/Torus.js';\r\n\r\nlet App = (function () {\r\n\r\n\tlet gl;\r\n\r\n\t// The shader program object is also used to\r\n\t// store attribute and uniform locations.\r\n\tlet prog;\r\n\r\n\t// Array of model objects.\r\n\tlet models = [];\r\n\r\n\t// Model that is target for user input.\r\n\tlet interactiveModel;\r\n\r\n\tlet camera = {\r\n\t\t// Initial position of the camera.\r\n\t\teye: [0, 1, 4],\r\n\t\t// Point to look at.\r\n\t\tcenter: [0, 0, 0],\r\n\t\t// Roll and pitch of the camera.\r\n\t\tup: [0, 1, 0],\r\n\t\t// Opening angle given in radian.\r\n\t\t// radian = degree*2*PI/360.\r\n\t\tfovy: 60.0 * Math.PI / 180,\r\n\t\t// Camera near plane dimensions:\r\n\t\t// value for left right top bottom in projection.\r\n\t\tlrtb: 2.0,\r\n\t\t// View matrix.\r\n\t\tvMatrix: mat4.create(),\r\n\t\t// Projection matrix.\r\n\t\tpMatrix: mat4.create(),\r\n\t\t// Projection types: ortho, perspective, frustum.\r\n\t\tprojectionType: \"perspective\",\r\n\t\t// Angle to Z-Axis for camera when orbiting the center\r\n\t\t// given in radian.\r\n\t\tzAngle: 0,\r\n\t\t// Distance in XZ-Plane from center when orbiting.\r\n\t\tdistance: 4,\r\n\t};\r\n\r\n\tfunction start() {\r\n\t\tinit();\r\n\t\trender();\r\n\t}\r\n\r\n\tfunction init() {\r\n\t\tinitWebGL();\r\n\t\tinitShaderProgram();\r\n\t\tinitUniforms()\r\n\t\tinitModels();\r\n\t\tinitEventHandler();\r\n\t\tinitPipline();\r\n\t}\r\n\r\n\tfunction initWebGL() {\r\n\t\t// Get canvas and WebGL context.\r\n\t\tlet canvas = document.getElementById('canvas');\r\n\t\tgl = canvas.getContext('webgl');\r\n\t\tgl.viewportWidth = canvas.width;\r\n\t\tgl.viewportHeight = canvas.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Init pipeline parameters that will not change again. \r\n\t * If projection or viewport change, their setup must\r\n\t * be in render function.\r\n\t */\r\n\tfunction initPipline() {\r\n\t\tgl.clearColor(.95, .95, .95, 1);\r\n\r\n\t\t// Backface culling.\r\n\t\tgl.frontFace(gl.CCW);\r\n\t\tgl.enable(gl.CULL_FACE);\r\n\t\tgl.cullFace(gl.BACK);\r\n\r\n\t\t// Depth(Z)-Buffer.\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\r\n\t\t// Polygon offset of rastered Fragments.\r\n\t\tgl.enable(gl.POLYGON_OFFSET_FILL);\r\n\t\tgl.polygonOffset(0.5, 0);\r\n\r\n\t\t// Set viewport.\r\n\t\tgl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\r\n\r\n\t\t// Init camera.\r\n\t\t// Set projection aspect ratio.\r\n\t\tcamera.aspect = gl.viewportWidth / gl.viewportHeight;\r\n\t}\r\n\r\n\tfunction initShaderProgram() {\r\n\t\t// Init vertex shader.\r\n\t\tlet vs = initShader(gl.VERTEX_SHADER, VertexShader);\r\n\t\t// Init fragment shader.\r\n\t\tlet fs = initShader(gl.FRAGMENT_SHADER, FragmentShader);\r\n\t\t// Link shader into a shader program.\r\n\t\tprog = gl.createProgram();\r\n\t\tgl.attachShader(prog, vs);\r\n\t\tgl.attachShader(prog, fs);\r\n\t\tgl.bindAttribLocation(prog, 0, \"aPosition\");\r\n\t\tgl.linkProgram(prog);\r\n\t\tgl.useProgram(prog);\r\n\t}\r\n\r\n\t/**\r\n\t * Create and init shader from source.\r\n\t * \r\n\t * @parameter shaderType: openGL shader type.\r\n\t * @parameter SourceTagId: Id of HTML Tag with shader source.\r\n\t * @returns shader object.\r\n\t */\r\n\tfunction initShader(shaderType, shaderSource) {\r\n\t\tlet shader = gl.createShader(shaderType);\r\n\t\t// let shaderSource = document.getElementById(SourceTagId).text;\r\n\t\tgl.shaderSource(shader, shaderSource);\r\n\t\tgl.compileShader(shader);\r\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\tconsole.log(SourceTagId + \": \" + gl.getShaderInfoLog(shader));\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn shader;\r\n\t}\r\n\r\n\tfunction initUniforms() {\r\n\t\t// Projection Matrix.\r\n\t\tprog.pMatrixUniform = gl.getUniformLocation(prog, \"uPMatrix\");\r\n\r\n\t\t// Model-View-Matrix.\r\n\t\tprog.mvMatrixUniform = gl.getUniformLocation(prog, \"uMVMatrix\");\r\n\t}\r\n\r\n\tfunction initModels() {\r\n\t\t// fillstyle\r\n\t\tlet fs = \"fillwireframe\";\r\n\t\tcreateModel(Torus.createVertexData(), fs, [0, 0, 0], [0, 0, 0], [1, 1, 1]);\r\n\t\tcreateModel(Plane.createVertexData(), \"wireframe\", [0, -.8, 0], [0, 0, 0],\r\n\t\t\t[1, 1, 1]);\r\n\r\n\t\tlet r = 1;\r\n\t\tlet t = 2 * Math.PI / 60;\r\n\t\tlet dt1 = 0;\r\n\t\tlet dt2 = 3 * t;\r\n\t\tlet dt3 = 6 * t;\r\n\t\tlet dt4 = 9 * t;\r\n\r\n\t\tconsole.log(dt1, dt2, dt3, dt4);\r\n\r\n\t\tlet [x, y] = [0, 0];\r\n\t\t[x, y] = calcPosition(dt1, r, -1);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [x, 0, y], [0, 0, 0],\r\n\t\t\t[.15, .15, .15]);\r\n\t\tmodels[2].xyAngle = dt1;\r\n\t\t[x, y] = calcPosition(dt2, r, -1);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [x, 0, y], [0, 0, 0],\r\n\t\t\t[.15, .15, .15]);\r\n\t\tmodels[3].xyAngle = dt2;\r\n\t\t[x, y] = calcPosition(dt3, r, -1);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [x, 0, y], [0, 0, 0],\r\n\t\t\t[.15, .15, .15]);\r\n\t\tmodels[4].xyAngle = dt3;\r\n\t\t[x, y] = calcPosition(dt4, r, -1);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [x, 0, y], [0, 0, 0],\r\n\t\t\t[.15, .15, .15]);\r\n\t\tmodels[5].xyAngle = dt4;\r\n\r\n\t\t// createModel(Sphere.createVertexData(), fs, [1, -.3, -1], [0, 0, 0],\r\n\t\t// \t[.25, .25, .25]);\r\n\t\t// createModel(Sphere.createVertexData(), fs, [-1, -.3, -1], [0, 0, 0],\r\n\t\t// \t[.25, .25, .25]);\r\n\t\t// createModel(Sphere.createVertexData(), fs, [1, -.3, 1], [0, 0, 0],\r\n\t\t// \t[.25, .25, .25]);\r\n\t\t// createModel(Sphere.createVertexData(), fs, [-1, -.3, 1], [0, 0, 0],\r\n\t\t// \t[.25, .25, .25]);\r\n\r\n\t\t// Select one model that can be manipulated interactively by user.\r\n\t\tinteractiveModel = models[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Create model object, fill it and push it in models array.\r\n\t * \r\n\t * @parameter geometryname: string with name of geometry.\r\n\t * @parameter fillstyle: wireframe, fill, fillwireframe.\r\n\t */\r\n\tfunction createModel(geometry, fillstyle, translate, rotate, scale) {\r\n\t\tlet model = {};\r\n\t\tmodel.fillstyle = fillstyle;\r\n\t\tinitDataAndBuffers(model, geometry);\r\n\t\tinitTransformations(model, translate, rotate, scale);\r\n\r\n\t\tmodels.push(model);\r\n\t}\r\n\r\n\t/**\r\n\t * Set scale, rotation and transformation for model.\r\n\t */\r\n\tfunction initTransformations(model, translate, rotate, scale) {\r\n\t\t// Store transformation vectors.\r\n\t\tmodel.translate = translate;\r\n\t\tmodel.rotate = rotate;\r\n\t\tmodel.scale = scale;\r\n\r\n\t\t// Create and initialize Model-Matrix.\r\n\t\tmodel.mMatrix = mat4.create();\r\n\r\n\t\t// Create and initialize Model-View-Matrix.\r\n\t\tmodel.mvMatrix = mat4.create();\r\n\t}\r\n\r\n\t/**\r\n\t * Init data and buffers for model object.\r\n\t * \r\n\t * @parameter model: a model object to augment with data.\r\n\t * @parameter geometryname: string with name of geometry.\r\n\t */\r\n\tfunction initDataAndBuffers(model, geometry) {\r\n\t\t// Provide model object with vertex data arrays.\r\n\t\t// Fill data arrays for Vertex-Positions, Normals, Index data:\r\n\t\t// vertices, normals, indicesLines, indicesTris;\r\n\t\t// Pointer this refers to the window.\r\n\t\t// this[geometryname]['createVertexData'].apply(model);\r\n\t\tObject.assign(model, geometry);\r\n\r\n\t\t// Setup position vertex buffer object.\r\n\t\tmodel.vboPos = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, model.vertices, gl.STATIC_DRAW);\r\n\t\t// Bind vertex buffer to attribute variable.\r\n\t\tprog.positionAttrib = gl.getAttribLocation(prog, 'aPosition');\r\n\t\tgl.enableVertexAttribArray(prog.positionAttrib);\r\n\r\n\t\t// Setup normal vertex buffer object.\r\n\t\tmodel.vboNormal = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, model.normals, gl.STATIC_DRAW);\r\n\t\t// Bind buffer to attribute variable.\r\n\t\tprog.normalAttrib = gl.getAttribLocation(prog, 'aNormal');\r\n\t\tgl.enableVertexAttribArray(prog.normalAttrib);\r\n\r\n\t\t// Setup lines index buffer object.\r\n\t\tmodel.iboLines = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesLines,\r\n\t\t\tgl.STATIC_DRAW);\r\n\t\tmodel.iboLines.numberOfElements = model.indicesLines.length;\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n\t\t// Setup triangle index buffer object.\r\n\t\tmodel.iboTris = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesTris,\r\n\t\t\tgl.STATIC_DRAW);\r\n\t\tmodel.iboTris.numberOfElements = model.indicesTris.length;\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\t}\r\n\r\n\tfunction calcPosition(t = 0, r = 1, x = 0, y = 0) {\r\n\t\tlet posX = 0, posY = 0;\r\n\t\tposX = r * Math.cos(t);\r\n\t\tposY = r * Math.sin(t);\r\n\r\n\t\tposX += x;\r\n\t\tposY += y;\r\n\r\n\t\treturn [posX, posY];\r\n\t}\r\n\r\n\tfunction calcAngle(x = 1, y = 1) {\r\n\t\tlet t = 0;\r\n\t\tif (y) {\r\n\t\t\tt = Math.acos(x / y);\r\n\t\t}\r\n\t\tconsole.log(t);\r\n\t\treturn t;\r\n\t}\r\n\r\n\tfunction initEventHandler() {\r\n\t\t// Rotation step.\r\n\t\tlet deltaRotate = Math.PI / 60;\r\n\t\tlet deltaTranslate = 0.05;\r\n\r\n\t\twindow.onkeydown = function (evt) {\r\n\t\t\tlet key = evt.which ? evt.which : evt.keyCode;\r\n\t\t\tlet c = String.fromCharCode(key);\r\n\t\t\t// console.log(evt);\r\n\t\t\t// Use shift key to change sign.\r\n\t\t\tlet sign = evt.shiftKey ? -1 : 1;\r\n\r\n\t\t\t// Rotate interactive Model.\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('K'):\r\n\t\t\t\t\tinteractiveModel.rotate[1] += sign * deltaRotate;\r\n\r\n\t\t\t\t\tlet r = 1;\r\n\t\t\t\t\tlet nAngle = 2 * Math.PI / 60;\r\n\r\n\t\t\t\t\tmodels[2].xyAngle += nAngle;\r\n\t\t\t\t\tmodels[3].xyAngle += nAngle;\r\n\t\t\t\t\tmodels[4].xyAngle += nAngle;\r\n\t\t\t\t\tmodels[5].xyAngle += nAngle;\r\n\r\n\t\t\t\t\tlet [x, y] = [0, 0];\r\n\t\t\t\t\t[x, y] = calcPosition(models[2].xyAngle, r, -1);\r\n\t\t\t\t\tmodels[2].translate[0] = x;\r\n\t\t\t\t\tmodels[2].translate[2] = y;\r\n\r\n\t\t\t\t\t[x, y] = calcPosition(models[3].xyAngle, r, -1);\r\n\t\t\t\t\tmodels[3].translate[0] = x;\r\n\t\t\t\t\tmodels[3].translate[2] = y;\r\n\r\n\t\t\t\t\t[x, y] = calcPosition(models[4].xyAngle, r, -1);\r\n\t\t\t\t\tmodels[4].translate[0] = x;\r\n\t\t\t\t\tmodels[4].translate[2] = y;\r\n\r\n\t\t\t\t\t[x, y] = calcPosition(models[5].xyAngle, r, -1);\r\n\t\t\t\t\tmodels[5].translate[0] = x;\r\n\t\t\t\t\tmodels[5].translate[2] = y;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t// case ('X'):\r\n\t\t\t\t// \tinteractiveModel.rotate[0] += sign * deltaRotate;\r\n\t\t\t\t// \tbreak;\r\n\t\t\t\t// case ('Y'):\r\n\t\t\t\t// \tinteractiveModel.rotate[1] += sign * deltaRotate;\r\n\t\t\t\t// \tbreak;\r\n\t\t\t\t// case ('Z'):\r\n\t\t\t\t// \tinteractiveModel.rotate[2] += sign * deltaRotate;\r\n\t\t\t\t// \tbreak;\r\n\t\t\t}\r\n\t\t\t// Change projection of scene.\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('O'):\r\n\t\t\t\t\tcamera.projectionType = \"ortho\";\r\n\t\t\t\t\tcamera.lrtb = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('F'):\r\n\t\t\t\t\tcamera.projectionType = \"frustum\";\r\n\t\t\t\t\tcamera.lrtb = 1.2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('P'):\r\n\t\t\t\t\tcamera.projectionType = \"perspective\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Camera move and orbit.\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('C'):\r\n\t\t\t\t\t// Orbit camera.\r\n\t\t\t\t\tcamera.zAngle += sign * deltaRotate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('H'):\r\n\t\t\t\t\t// Move camera up and down.\r\n\t\t\t\t\tcamera.eye[1] += sign * deltaTranslate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('D'):\r\n\t\t\t\t\t// Camera distance to center.\r\n\t\t\t\t\tcamera.distance += sign * deltaTranslate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('V'):\r\n\t\t\t\t\t// Camera fovy in radian.\r\n\t\t\t\t\tcamera.fovy += sign * 5 * Math.PI / 180;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('B'):\r\n\t\t\t\t\t// Camera near plane dimensions.\r\n\t\t\t\t\tcamera.lrtb += sign * 0.1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Render the scene again on any key pressed.\r\n\t\t\trender();\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Run the rendering pipeline.\r\n\t */\r\n\tfunction render() {\r\n\t\t// Clear framebuffer and depth-/z-buffer.\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\t\tsetProjection();\r\n\r\n\t\tcalculateCameraOrbit();\r\n\r\n\t\t// Set view matrix depending on camera.\r\n\t\tmat4.lookAt(camera.vMatrix, camera.eye, camera.center, camera.up);\r\n\r\n\t\t// Loop over models.\r\n\t\tfor (let i = 0; i < models.length; i++) {\r\n\t\t\t// Update modelview for model.\r\n\t\t\tupdateTransformations(models[i]);\r\n\r\n\t\t\t// Set uniforms for model.\r\n\t\t\tgl.uniformMatrix4fv(prog.mvMatrixUniform, false,\r\n\t\t\t\tmodels[i].mvMatrix);\r\n\r\n\t\t\tdraw(models[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateCameraOrbit() {\r\n\t\t// Calculate x,z position/eye of camera orbiting the center.\r\n\t\tlet x = 0, z = 2;\r\n\t\tcamera.eye[x] = camera.center[x];\r\n\t\tcamera.eye[z] = camera.center[z];\r\n\t\tcamera.eye[x] += camera.distance * Math.sin(camera.zAngle);\r\n\t\tcamera.eye[z] += camera.distance * Math.cos(camera.zAngle);\r\n\t}\r\n\r\n\tfunction setProjection() {\r\n\t\tlet v;\r\n\t\t// Set projection Matrix.\r\n\t\tswitch (camera.projectionType) {\r\n\t\t\tcase (\"ortho\"):\r\n\t\t\t\tv = camera.lrtb;\r\n\t\t\t\tmat4.ortho(camera.pMatrix, -v, v, -v, v, -10, 10);\r\n\t\t\t\tbreak;\r\n\t\t\tcase (\"frustum\"):\r\n\t\t\t\tv = camera.lrtb;\r\n\t\t\t\tmat4.frustum(camera.pMatrix, -v / 2, v / 2, -v / 2, v / 2, 1, 10);\r\n\t\t\t\tbreak;\r\n\t\t\tcase (\"perspective\"):\r\n\t\t\t\tmat4.perspective(camera.pMatrix, camera.fovy,\r\n\t\t\t\t\tcamera.aspect, 1, 10);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t// Set projection uniform.\r\n\t\tgl.uniformMatrix4fv(prog.pMatrixUniform, false, camera.pMatrix);\r\n\t}\r\n\r\n\t/**\r\n\t * Update model-view matrix for model.\r\n\t */\r\n\tfunction updateTransformations(model) {\r\n\r\n\t\t// Use shortcut variables.\r\n\t\tlet mMatrix = model.mMatrix;\r\n\t\tlet mvMatrix = model.mvMatrix;\r\n\r\n\t\t// mat4.copy(mvMatrix, camera.vMatrix);\r\n\r\n\t\t// Reset matrices to identity.         \r\n\t\tmat4.identity(mMatrix);\r\n\t\tmat4.identity(mvMatrix);\r\n\r\n\t\t// Translate.\r\n\t\tmat4.translate(mMatrix, mMatrix, model.translate);\r\n\t\t// Rotate.\r\n\t\tmat4.rotateX(mMatrix, mMatrix, model.rotate[0]);\r\n\t\tmat4.rotateY(mMatrix, mMatrix, model.rotate[1]);\r\n\t\tmat4.rotateZ(mMatrix, mMatrix, model.rotate[2]);\r\n\t\t// Scale\r\n\t\tmat4.scale(mMatrix, mMatrix, model.scale);\r\n\r\n\t\t// Combine view and model matrix\r\n\t\t// by matrix multiplication to mvMatrix.        \r\n\t\tmat4.multiply(mvMatrix, camera.vMatrix, mMatrix);\r\n\t}\r\n\r\n\tfunction draw(model) {\r\n\t\t// Setup position VBO.\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n\t\tgl.vertexAttribPointer(prog.positionAttrib, 3, gl.FLOAT, false,\r\n\t\t\t0, 0);\r\n\r\n\t\t// Setup normal VBO.\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n\t\tgl.vertexAttribPointer(prog.normalAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n\t\t// Setup rendering tris.\r\n\t\tlet fill = (model.fillstyle.search(/fill/) != -1);\r\n\t\tif (fill) {\r\n\t\t\tgl.enableVertexAttribArray(prog.normalAttrib);\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n\t\t\tgl.drawElements(gl.TRIANGLES, model.iboTris.numberOfElements,\r\n\t\t\t\tgl.UNSIGNED_SHORT, 0);\r\n\t\t}\r\n\r\n\t\t// Setup rendering lines.\r\n\t\tlet wireframe = (model.fillstyle.search(/wireframe/) != -1);\r\n\t\tif (wireframe) {\r\n\t\t\tgl.disableVertexAttribArray(prog.normalAttrib);\r\n\t\t\tgl.vertexAttrib3f(prog.normalAttrib, 0, 0, 0);\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n\t\t\tgl.drawElements(gl.LINES, model.iboLines.numberOfElements,\r\n\t\t\t\tgl.UNSIGNED_SHORT, 0);\r\n\t\t}\r\n\t}\r\n\r\n\t// App interface.\r\n\treturn {\r\n\t\tstart: start\r\n\t}\r\n\r\n}());\r\n\r\nexport default App;","export let FragmentShader = `\r\n    precision mediump float;\r\n    varying vec4 vColor;\r\n\r\n    void main() {\r\n    gl_FragColor = vColor;\r\n    }\r\n`","import App from './App.js';\r\n\r\ndocument.body.onload = () => {\r\n    App.start();\r\n};"],"names":["ARRAY_TYPE","Float32Array","Array","create","out","glMatrix.ARRAY_TYPE","identity","Math","hypot","y","i","arguments","length","sqrt","Plane","createVertexData","n","m","this","vertices","normals","indicesLines","Uint16Array","indicesTris","iLines","iTris","u","j","v","iVertex","x","z","Sphere","du","PI","dv","sin","cos","vertexLength","Torus","nx","ny","nz","App","gl","prog","interactiveModel","models","camera","eye","center","up","fovy","lrtb","vMatrix","mat4.create","pMatrix","projectionType","zAngle","distance","initShader","shaderType","shaderSource","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","console","log","SourceTagId","getShaderInfoLog","createModel","geometry","fillstyle","translate","rotate","scale","model","Object","assign","vboPos","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","positionAttrib","getAttribLocation","enableVertexAttribArray","vboNormal","normalAttrib","iboLines","ELEMENT_ARRAY_BUFFER","numberOfElements","iboTris","initDataAndBuffers","mMatrix","mvMatrix","initTransformations","push","calcPosition","t","r","posX","posY","render","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","lr","left","right","bt","bottom","top","nf","near","far","rl","tb","mat4.frustum","aspect","f","tan","Infinity","mat4.perspective","uniformMatrix4fv","pMatrixUniform","setProjection","abs","updateTransformations","mvMatrixUniform","draw","a","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","mat4.identity","rad","s","c","mat4.rotateX","mat4.rotateY","mat4.rotateZ","mat4.scale","b","a30","a31","a32","a33","b0","b1","b2","b3","mat4.multiply","vertexAttribPointer","FLOAT","search","drawElements","TRIANGLES","UNSIGNED_SHORT","disableVertexAttribArray","vertexAttrib3f","LINES","start","canvas","document","getElementById","getContext","viewportWidth","width","viewportHeight","height","initWebGL","vs","VERTEX_SHADER","fs","FRAGMENT_SHADER","createProgram","attachShader","bindAttribLocation","linkProgram","useProgram","initShaderProgram","getUniformLocation","dt2","dt3","dt4","xyAngle","initModels","deltaRotate","window","onkeydown","evt","key","which","keyCode","String","fromCharCode","sign","shiftKey","nAngle","initEventHandler","clearColor","frontFace","CCW","enable","CULL_FACE","cullFace","BACK","DEPTH_TEST","POLYGON_OFFSET_FILL","polygonOffset","viewport","body","onload"],"mappings":"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"}